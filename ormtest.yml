- name: Create instance django 
  hosts: localhost
  gather_facts: False
  vars:
    keypair: dudanewpc
    instance_type: t2.micro
    security_group: launch-wizard-14
    image: ami-0817d428a6fb68645
    region: us-east-1
  tasks:
    - name: Launch djangoinstances
      ec2:
        key_name: "{{ keypair }}"
        region: "{{ region }}" 
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: yes   
        vpc_subnet_id: subnet-c1cf7da6 
        count : 1
        assign_public_ip: yes
      register: ec23  


     
    - name: Create SSH Group to login dynamically to EC2 Instance
      add_host: 
        hostname: "{{ item.public_ip }}"
        groupname: ec2_server_django
      with_items: '{{ ec23.instances }}'

    - name: Wait for SSH to come up
      wait_for: 
        host: "{{ item.public_ip }}" 
        port: 22
        delay: 10
        timeout: 320
        state: started
      with_items: '{{ ec23.instances }}'

- hosts: localhost
  gather_facts: no
  tasks:
  - debug: var=ivar
    delegate_to: ec2_server_django

- hosts: ec2_server_django
  become: yes
  remote_user: ubuntu 
  gather_facts: yes

  tasks:
  - name: Install openvpn
    become: yes
    become_user: root
    apt: 
      name: openvpn   
      update_cache: True 
      state: present  
  - name: Copy file with owner and permissions
    copy:
      src: /tmp/ca_openvpn_pool_example/generated/janedoe/janedoe.ovpn
      dest: /tmp
      mode: '0644'
  # - name: connect to server
  # - name: Run command if /path/to/database does not exist (without 'args')-- connect to server
  #   command: sudo openvpn --config /tmp/janedoe.ovpn 





#   - name: apt update
#     become: true
#     become_user: root
#     apt: 
#       update_cache: yes 
#       name: [python3-dev, libpq-dev, python3-pip]
# #       state: present
#   - name: pip install
#     pip:
#       name:
#         - django
#         - psycopg2
#         - djangorestframework
#   - name: git cloning
#     git:
#       repo: https://github.com/mariaeduardabicalho/tasks.git
#       dest: /home/ubuntu/tasks
#   - name: change host
#     lineinfile:
#       path: /home/ubuntu/tasks/portfolio/settings.py
#       regexp: '^        HOST'
#       # line: '       "HOST": {{ ec2.instances.public_ip  }}'
#       # line: "       'HOST': {{ hostvars['ec2_server_']['hostname']}},"
#       line: "        'HOST': '3.19.31.197',"
#   - name: migration
#     command: python3 manage.py migrate
#     throttle: 1
#     args:
#       chdir: /home/ubuntu/tasks
#   - name: crontab
#     cron:
#       name: "start django"
#       special_time: reboot
#       job: cd /home/ubuntu/tasks && ./run.sh
#   - name: reboot machine
#     become: true
#     become_user: root
#     reboot:

# - hosts: ec2_server_django
#   become: yes
#   remote_user: ubuntu 
#   gather_facts: yes
  
#   tasks:
#     - name: Install nginx
#       apt:
#         name: nginx
#         state: present
#     - name: Create default index page
#       copy:
#         dest: /usr/share/nginx/html/index.html
#         content: "Howdy from {{ ansible_hostname }}"
#     - name: Restart nginx
#       service:
#         name: nginx
#         state: restarted

# - name: create load balancer
#   hosts: localhost
#   tasks:  
#     - name: Create the ELB only listening over port 80
#       ec2_elb_lb:
#         name: duda-load-balancer
#         state: present
#         region: us-east-1
#         zones:
#           - us-east-1a
#           - us-east-1b
#           - us-east-1c
#           - us-east-1d
#           - us-east-1e
#           - us-east-1f

#         listeners:
#           - protocol: http
#             load_balancer_port: 80
#             instance_port: 80
        
#           - protocol: http
#             load_balancer_port: 8080
#             instance_port: 8080
#       register: elb

# - hosts: localhost
#   tasks:
#     - name: Add each EC2 instance to the ELB
#       ec2_elb:
#         state: present
#         ec2_elbs: duda-load-balancer
#         region: us-east-1
#         instance_id: "{{ item.id }}"
#       with_items: "{{ ec2.instances}}"
