---
- name: Create Instance
  hosts: localhost
  gather_facts: False
  vars:
    keypair: dudanewpc
    instance_type: t2.micro
    security_group: launch-wizard-14
    image: ami-0817d428a6fb68645
    region: us-east-1
    
  tasks:
    - name: Launch instance
      ec2:
        key_name: "{{ keypair }}"
        region: "{{ region }}" 
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: yes   
        vpc_subnet_id: subnet-c1cf7da6 
        count : 1
        assign_public_ip: yes
      register: ec2
      
    - name: Create SSH Group to login dynamically to EC2 Instance
      add_host: 
        hostname: "{{ item.public_ip }}"
        groupname: ec2_server
      with_items: '{{ ec2.instances }}'

    - name: Wait for SSH to come up
      wait_for: 
        host: "{{ item.public_ip }}" 
        port: 22
        delay: 10
        timeout: 320
        state: started
      with_items: '{{ ec2.instances }}'

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: launched
        inventory_dir: '{{ inventory_dir }}'
      with_items: "{{ ec2.instances }}"
    

- hosts: ec2_server
  become: yes
  remote_user: ubuntu 
  gather_facts: yes
  
  tasks:
    - name: Install nginx
      apt:
        name: nginx
        state: present
    - name: Create default index page
      copy:
        dest: /usr/share/nginx/html/index.html
        content: "Howdy from {{ ansible_hostname }}"
    - name: Restart nginx
      service:
        name: nginx
        state: restarted
  
 

# - name: Create a target group with instance targets
#   community.aws.elb_target_group:
#     name: mytargetgroup
#     protocol: http
#     port: 81
#     health_check_protocol: http
#     health_check_path: /
#     successful_response_codes: "200,250-260"
#     targets:
#       add_target:
#         - Id: "{{item.public_ip}}"
#           Port: 80
#       with_items: "{{ec2.instances}}"
    
#     state: present
#     wait_timeout: 200
#     wait: True


# - name: Create Load Balancer
#   hosts: localhost
#   gather_facts: False
#   vars:
#     keypair: accessdudab

#     region: us-east-1

#   tasks:
#     - community.aws.elb_application_lb:
#           name: myelb
#           security_groups:
#             -lbsecuritygroupp
#           listeners:
#             - Protocol: HTTP # Required. The protocol for connections from clients to the load balancer (HTTP or HTTPS) (case-sensitive).
#               Port: 80 # Required. The port on which the load balancer is listening.
#               # The security policy that defines which ciphers and protocols are supported. The default is the current predefined security policy.
#               SslPolicy: ELBSecurityPolicy-2015-05
#               Certificates: # The ARN of the certificate (only one certficate ARN should be provided)
#                 - CertificateArn: arn:aws:iam::12345678987:server-certificate/test.domain.com
#               DefaultActions:
#                 - Type: forward # Required.
#                   TargetGroupName: mytargetgroup # Required. The name of the target group
#           state: present

# - name: Create the ELB only listening over port 80
#   hosts: localhost
#   tasks:  
#     community.aws.elb_application_lb:
#       name: duda-load-balancer
#       state: present
#       region: us-east-1
#       zones:
#         - us-east-1a
#         - us-east-1b
#       listeners:
#         - protocol: http
#       load_balancer_port: 80
#       instance_port: 80
#       register: elb

- name: create load balancer
  hosts: localhost
  tasks:  
    - name: Create the ELB only listening over port 80
      ec2_elb_lb:
        name: duda-load-balancer
        state: present
        region: us-east-1
        zones:
          - us-east-1a
          - us-east-1b
          - us-east-1c
          - us-east-1d
          - us-east-1e
          - us-east-1f

        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: elb

- hosts: localhost
  tasks:
    - name: Add each EC2 instance to the ELB
      ec2_elb:
        state: present
        ec2_elbs: duda-load-balancer
        region: us-east-1
        instance_id: "{{ item.id }}"
      with_items: "{{ ec2.instances}}"

- hosts: localhost
  tasks:
 
    - name: create launch config
      ec2_lc:
        name: proj_lc
        image_id: ami-0817d428a6fb68645
        key_name: dudanewpc
        region: us-east-1
        security_groups:  launch-wizard-14
        instance_type: t2.micro
        assign_public_ip: yes

    - name: create auto scal
      ec2_asg:
        name: proj_as
        launch_config_name: proj_lc
        health_check_period: 60
        health_check_type: ELB
        replace_all_instances: yes
        min_size: 5
        max_size: 5
        desired_capacity: 5
        region: us-east-1



    
 