---
- name: Create instance
  hosts: localhost
  gather_facts: False
  vars:
    keypair: accessdudab
    instance_type: t2.micro
    security_group: launch-wizard-14
    image: ami-0817d428a6fb68645
    region: us-east-1
    inventory_dir: /inventory/database
    
  tasks:
    - name: Launch instance
      ec2:
        key_name: "{{ keypair }}"
        region: "{{ region }}" 
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: yes   
        vpc_subnet_id: subnet-c1cf7da6 
        count : 1
        assign_public_ip: yes
      register: ec2  
    
    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: database
        inventory_dir: '{{ inventory_dir }}'
      with_items: "{{ ec2.instances }}"
      
    - name: Create SSH Group to login dynamically to EC2 Instance
      add_host: 
        hostname: "{{ item.public_ip }}"
        groupname: ec2_server
      with_items: '{{ ec2.instances }}'

    - name: Wait for SSH to come up
      wait_for: 
        host: "{{ item.public_ip }}" 
        port: 22
        delay: 10
        timeout: 320
        state: started
      with_items: '{{ ec2.instances }}'


- hosts: ec2_server
  become: yes
  remote_user: ubuntu 
  gather_facts: yes
  
  tasks:
  - name: apt update
    become: yes
    become_user: root
    apt: 
      update_cache: True 
      name: [openssl, libssl-dev, libssl-dev,libssl-dev]
      state: present
  - name: Install pip
    apt: 
      name: python3-pip, python3-dev, libpq-dev    
      update_cache: True 
      state: present
  - name: install postgresql
    apt: name ={{item}}
    with_items:
        postgreasql
        postgreasql-contrib
        libpq-dev
        python-psycopg2
  - name: Make sure psycopg2 is installed
    pip:
      name: 
        - psycopg2
        - PyMySQL
- hosts: database
  gather_facts: False
  become: yes
  vars_files:
    - vars/main.yml
  roles:
    - geerlingguy.postgresql
  # - name: Ensure the PostgreSQL service is running
  #   service: 
  #     name: postgresql 
  #     state: started 
  #     enabled: yes
  # - name: Ensure database is createdb
  #   become: true 
  #   become_user: postgres
  #   postgresql_db: 
  #     name: cloud
  #     encoding: 'UTF-8'
  #     lc_collate: 'en_US.UTF-8'
  #     lc_ctype: 'en_US.UTF-8'
  #     template: 'template0'  
  #     state: present
  # - name:  User create
  #   become: true
  #   become_user: postgres
  #   postgresql_user:
  #     db: "cloud"
  #     name: "cloudi"
  #     password: "cloudi"  
  #     priv: ALL
  #     state: present
  # - name: ensure privileges
  #   become: true
  #   become_user: postgres   
  #   postgresql_user:
  #     name: "cloudi"
  #     role_attr_flags: "CREATEDB,NOSUPERUSER"
  #     state: present

  # - name: restart postgres
  #   service :
  #     name: postgresql
  #     state: restarted