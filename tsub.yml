# Rodar no terminal :  export ANSIBLE_HOST_KEY_CHECKING=False
- name: Create instance
  hosts: localhost
  gather_facts: yes #False
  vars:
    keypair: accessdudab2
    instance_type: t2.micro
    security_group: dbsgroup
    image: ami-0dd9f0e7df0f0a138 
    region: us-east-2 
    inventory_dir: /inventory/database
    
  tasks:
    - name: Launch instance
      ec2:
        key_name: "{{ keypair }}"
        region: "{{ region }}" 
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: yes   
        vpc_subnet_id: subnet-59d02915 
        count : 1
        assign_public_ip: yes
      register: ec2_db  
    
    - name: Add new instance to host group
      add_host:
        name: "db_ip"
        ivar: "{{ item.public_ip }}"
        hostname: "{{ item.public_ip }}"
        groupname: database
        debug: var=ivar
        delegate_to: ec2_server_djang        
      with_items: "{{ ec2_db.instances }}"
      
    - name: Create SSH Group to login dynamically to EC2 Instance

      add_host: 
       
        #  name: "db_ip"
        # ivar: "{{ item.public_ip }}"
        hostname: "{{ item.public_ip }}"
        groupname: ec2_server_
        inventory_dir: /mnt/c/users/duda/documents/insper/6-semestre/cloud/projeto/inventory/ec2_sever
        # debug: var=ivar
        # delegate_to: ec2_server_djang
      with_items: '{{ ec2_db.instances }}'

    # - name: save var
    #   debug: var=ivar
    #   delegate_to: localhost
   
    - name: Wait for SSH to come up
      wait_for: 
        host: "{{ item.public_ip }}" 
        port: 22
        delay: 10
        timeout: 320
        state: started
      with_items: '{{ ec2_db.instances }}'

- hosts: ec2_server_
  become: yes
  remote_user: ubuntu 
  gather_facts: yes
  
  tasks:
  - name: apt update
    become: yes
    become_user: root
    apt: 
      update_cache: True 
      name: [openssl, libssl-dev, libssl-dev,libssl-dev]
      state: present
  - name: Install pip
    apt: 
      name: python3-pip, python3-dev, libpq-dev    
      update_cache: True 
      state: present
  - name: install postgresql
    apt: name ={{item}}
    with_items:
        postgreasql
        postgreasql-contrib
        libpq-dev
        python-psycopg2
  - name: Make sure psycopg2 is installed
    pip:
      name: 
        - psycopg2
        - PyMySQL
        
- hosts: ec2_server_
  become: yes
  remote_user: ubuntu 
  gather_facts: yes  
  vars_files:
    - vars/main.yml
  roles:
    - geerlingguy.postgresql

- hosts: ec2_server_
  become: yes
  remote_user: ubuntu 
  gather_facts: yes
  
  tasks:
  - name: uncomment line
    lineinfile:
      path: /etc/postgresql/10/main/postgresql.conf
      regexp: '^#(.*Uncomment this line.*)'
      line: listen_addresses = '*'
      
  - name: add line   
    lineinfile:
      path: /etc/postgresql/10/main/pg_hba.conf
      line: host all all 0.0.0.0/0 md5

  - name: liberar firewall
    become: yes
    command: sudo ufw allow 5432/tcp

  - name: reiniciar postgres
    become: yes
    command: sudo systemctl restart postgresql

- name: Create instance django 
  hosts: localhost
  gather_facts: False
  vars:
    keypair: accessdudab
    instance_type: t2.micro
    security_group: launch-wizard-14
    image: ami-0817d428a6fb68645
    region: us-east-1
  tasks:
    - name: Launch djangoinstances
      ec2:
        key_name: "{{ keypair }}"
        region: "{{ region }}" 
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: yes   
        vpc_subnet_id: subnet-c1cf7da6 
        count : 2
        assign_public_ip: yes
      register: ec2  
     
    - name: Create SSH Group to login dynamically to EC2 Instance
      add_host: 
        hostname: "{{ item.public_ip }}"
        groupname: ec2_server_djang
      with_items: '{{ ec2.instances }}'

    - name: Wait for SSH to come up
      wait_for: 
        host: "{{ item.public_ip }}" 
        port: 22
        delay: 10
        timeout: 320
        state: started
      with_items: '{{ ec2.instances }}'

- hosts: localhost
  gather_facts: no
  tasks:
  - debug: var=ivar
    delegate_to: ec2_server_djang

- hosts: ec2_server_djang
  become: yes
  remote_user: ubuntu 
  gather_facts: yes

  tasks:
  - name: apt update
    become: true
    become_user: root
    apt: 
      update_cache: yes 
      name: [python3-dev, libpq-dev, python3-pip]
      state: present
  - name: pip install
    pip:
      name:
        - django
        - psycopg2
  - name: git cloning
    git:
      repo: https://github.com/mariaeduardabicalho/tasks.git
      dest: /home/ubuntu/tasks
  - name: change host
    lineinfile:
      path: /home/ubuntu/tasks/portfolio/settings.py
      regexp: '^        HOST'
      # line: '       "HOST": {{ ec2.instances.public_ip  }}'
      # line: "       'HOST': {{ hostvars['ec2_server_']['hostname']}},"
      line: "        'HOST': '{{hostvars['db_ip']['ivar']}}',"
  - name: migration
    command: python3 manage.py migrate
    throttle: 1
    args:
      chdir: /home/ubuntu/tasks
  - name: crontab
    cron:
      name: "start django"
      special_time: reboot
      job: cd /home/ubuntu/tasks && ./run.sh
  - name: reboot machine
    become: true
    become_user: root
    reboot:

- hosts: ec2_server_djang
  become: yes
  remote_user: ubuntu 
  gather_facts: yes
  
  tasks:
    - name: Install nginx
      apt:
        name: nginx
        state: present
    - name: Create default index page
      copy:
        content: 'We are at {{ ansible_hostname }}'
        dest: /usr/share/nginx/html/{{ ansible_hostname }} #/etc/nginx/nginx.conf

        
    - name: Restart nginx
      service:
        name: nginx
        state: restarted  



- name: create load balancer
  hosts: localhost
  tasks:  
    - name: Create the ELB only listening over port 80
      ec2_elb_lb:
        name: t-load-balancer
        state: present
        region: us-east-1
        zones:
          - us-east-1a
          - us-east-1b
          - us-east-1c
          - us-east-1d
          - us-east-1e
          - us-east-1f

        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
      register: elb

- hosts: localhost
  tasks:
    - name: Add each EC2 instance to the ELB
      ec2_elb:
        state: present
        ec2_elbs: t-load-balancer
        region: us-east-1 
        instance_id: "{{ item.id }}"
      with_items: "{{ ec2.instances}}"

